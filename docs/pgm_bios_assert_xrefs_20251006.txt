PGM BIOS 断言字符串交叉引用（2025-10-06）
=====================================

概述
----
- 工具：更新后的 `ida_mcp_client.py string-xrefs`（支持按地址、字符串内容匹配，并自动拉取 ROM 字符串文本）。
- MCP 端口：13337。
- 目标：补全 `ade.c`、`ntbuf.c`、`cdisplay.c`、`.z80cm68k2z80.c` 四个模块的断言调用者。

结果速览
--------
| 模块 | 字符串地址 | 调用点 | 函数/语境 | 说明 |
| ---- | ---------- | ------ | ---------- | ---- |
| ade.c | 0x1347C / 0x13498 | 0x031BA / 0x03232 | 例程 0x0319A | `pgm_fade_slot_init` 风格函数，向 `sub_7FCC` 推送 `ade.c` 字符串并在复制槽结构前验证 `slot->state==RS_ACTIVE`。 |
| ntbuf.c | 0x1405E.. | 0x0A882 | 例程 0x0A858 | 网络缓冲区构建器，检查 `d6`（请求索引）不超过 `img->totpic`，随后调用 `sub_772C`/`sub_A3B8`。 |
| cdisplay.c | 0x14120.. | 0x0B8FE | 例程 0x0B8E0 | 服务 UI 显示描述符注册器，写入 `0x8034E2` 表格前确认 `h < MAXDISPLAY`。 |
| .z80cm68k2z80.c | 0x14A04 / 0x14A32 / 0x14A6C / 0x14A9A | 0x0CFEA / 0x0D02A / 0x0D106 / 0x0D19A | `sub_CFC8` 及其波形/乐谱写入辅助函数 | M68K → Z80 下载调度，逐块校验 Midi/Wave 索引与地址范围，违规时进入致命断言。 |

调用细节
--------
- **0x0319A**：
  - 引用 `0x13490` (`"ade.c"`) 与 `0x1347C` (`"f->state==RS_ACTIVE"`)。
  - 背景：根据 `*(0x802058 + slot*0x10)` 的状态决定是否复制 ADE 槽；状态不为 2 则触发断言并调用 `sub_7FCC`。

- **0x0A858**：
  - 引用 `0x14074` (`"ntbuf.c"`) 与 `0x1405E` (`"n>=0 && n<img->totpic"`)。
  - 背景：验证请求的图像索引与总数量，失败时输出错误码 `0x193` 并停止下载。

- **0x0B8E0**：
  - 引用 `0x14136` (`"cdisplay.c"`) 与 `0x14120` (`"h>=0 && h<MAXDISPLAY"`)，后续循环中继续访问 `0x14142`~`0x142C6`。
  - 背景：将新显示页写入 `0x8034E2` 队列，同时维护 `0x80351A` 单链表。

- **0x0CFC8** 系列：
  - 在多处 `pea` 指令中推送 `.z80cm68k2z80.c` 字符串：
    - `0x0CFEA` → `0x14A04` (`ubTotal < conZ80MidiIndexMax`)
    - `0x0D02A` → `0x14A32` (`((ULONG)uwZ80StartAddr + uwSize) < 0xffff`)
    - `0x0D10C` → `0x14A6C`
    - `0x0D19E` → `0x14A9A`
  - 背景：块下载调度器逐条检查数据长度与起始地址，失败即调用 `sub_7FCC`。

后续动作
--------
- 更新 `docs/pgm_bios_assert_index.txt`（已完成）。
- 为 `0x0319A` / `0x0A858` / `0x0B8E0` 函数补充专门的函数文档（待下一阶段完成）。
- 将 `string-xrefs` 命令采用写入脚本的形式（例如 `tools/find_assert_callers.py`）以便批量导出。
