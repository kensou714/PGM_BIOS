PGM BIOS Function: sub_6DEE (Insert/Shift String in Ranking Text Buffer)
---------------------------------------------------------------------
Summary: Inserts a string into a buffer, shifting existing data forward to make room. Commonly used to update formatted ranking strings. The routine handles overlapping regions carefully by copying data into a temporary stack buffer when necessary.

Parameters:
- arg_0: pointer to the destination buffer.
- arg_4: maximum bytes allowed to be shifted (buffer length).
- arg_8: flag: if non-zero, copy directly using `sub_D9B2`; if zero, use a temporary stack buffer before calling `sub_D9B2` for the final write.
- arg_C: number of bytes to make room for (i.e., length of inserted string).

Algorithm:
1. Compute `d2 = strlen(arg_0)` (byte loop until 0 terminator), yielding current string length.
2. Clamp `d3 = min(d2, arg_4)` so the routine does not shift beyond the buffer limit.
3. If the requested length matches `d2`, nothing needs to be shifted (exit).
4. When `arg_8 != 0`: call `sub_D9B2(dest + d2, arg_C, src)` to move data directly, then zero the byte at the end of the new region.
5. When `arg_8 == 0`:
   - Copy `d2` bytes from `arg_0` into a temporary buffer on the stack.
   - Copy those bytes back into the destination, shifted by `d3`, to create space.
   - Call `sub_D9B2(arg_0, arg_C, dest + d3 - d2)` to insert the new data.
   - Clear the terminator byte at `dest + d3`.

Effectively this routine behaves like a safe `memmove` combined with custom insertion logic for strings.

Analysis notes:
- `sub_D9B2` is a helper that performs a copy of `len` bytes from `src` to `dest`; its behaviour should be documented separately.
- The stack buffer (var_22) is used to avoid overlap issues when `arg_8 == 0`.
- The final `clr.b` ensures the destination string remains null-terminated after the shift.
- The function assumes `arg_C` bytes will be provided by the caller immediately after this routine (often by writing new data into the gap).
